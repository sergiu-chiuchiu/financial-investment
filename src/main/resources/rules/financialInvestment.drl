package com.aib;
import com.aib.*
dialect "mvel"
import java.util.*
import com.aib.enums.*
import java.util.Date
import java.sql.Time
import java.time.Period
import java.time.Duration
import java.util.concurrent.TimeUnit
import java.time.LocalDate

//--- Rule 1 ------------------------------------------------------------------------------------------------------------

rule "checkTransactionExpired" salience 15
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
    // check if the transaction hasn't expired
        && at.getWaitUntil().compareTo(Calendar.getInstance()) < 0
        && transactionState != TransactionState.EXPIRED
        )
    then
        at.setTransactionState(TransactionState.EXPIRED);
        System.out.println("Transaction with id " + at.getId() + " has expired");
        update(at);
end

//--- Rule 2 ------------------------------------------------------------------------------------------------------------

rule "checkTransactionStillValid" salience 13
    when
    // check if the transaction hasn't expired
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
        && waitUntil.compareTo(Calendar.getInstance()) >= 0)
    then
        at.setTransactionState(TransactionState.ON_TERM);
        System.out.println("Transaction with id " + at.getId() + " is still on term");
        update(at);
end

//--- Rule 3 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactBuyThresholdTrue" salience 11
    when
        sp:StockProfile()
        at:AutoTransaction(
            stockProfile == sp
            && transactionType == TransactionType.BUY
            && transactionState == TransactionState.ON_TERM
            && thresholdPrice >= sp.currentPrice
            )
//        check that the transaction actually  belongs to an investor
        i:Investor(autoTransactionSet.contains(at))
    then
        at.setTransactionState(TransactionState.IS_IN_THRESHOLD);
        System.out.println("Pending transaction " + at.getId() + " for buying stocks for " + i.name + " has the stock price in the required limits");
        update(at);
end

//--- Rule 4 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactSellThresholdTrue" salience 9
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.SELL
            && transactionState == TransactionState.ON_TERM
            && thresholdPrice <= sp.currentPrice)
//        check that the transaction actually  belongs to an investor
        i:Investor(autoTransactionSet.contains(at))
    then
        at.setTransactionState(TransactionState.IS_IN_THRESHOLD);
        System.out.println("Pending transaction " + at.getId() + " for selling stocks for " + i.name + " has the stock price in the required limits");
        update(at);
end

//--- Rule 5 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactBuy" salience 5
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.BUY
            && transactionState == TransactionState.IS_IN_THRESHOLD)
//        check that the transaction actually  belongs to an investor
//        + check if the investor has enough available funds
        i:Investor(autoTransactionSet.contains(at) && availableFunds >= (at.noOfShares * sp.currentPrice))
    then
        // we execute transaction
        Investor.executeBuyTransaction(i, at);
        at.setTransactionState(TransactionState.PROCESSED);
            Double costOfShares = at.getNoOfShares() * at.getStockProfile().getCurrentPrice();
            i.setAvailableFunds(i.getAvailableFunds() - costOfShares);
        System.out.println("Transaction for buying stocks for " + i.name + " has been successfully executed");
        update(i);
        update(at);
end

//--- Rule 6 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactSell" salience 7
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.SELL
            && transactionState == TransactionState.IS_IN_THRESHOLD)
//        check that the transaction actually  belongs to an investor
        i:Investor(autoTransactionSet.contains(at))
    then
        // we execute transaction
        Investor.executeSellTransaction(i, at);
        at.setTransactionState(TransactionState.PROCESSED);
            Double valueOfShares = at.getNoOfShares() * at.getStockProfile().getCurrentPrice();
            i.setAvailableFunds(i.getAvailableFunds() + valueOfShares);
        System.out.println("Transaction for selling stocks for " + i.name + " has been successfully executed");
        update(i);
        update(at);
end

//--- Rule 7 ------------------------------------------------------------------------------------------------------------

rule "highest/lowest available founds" salience 18
    when
        Investor($lowestFunds : availableFunds, $name1 : name)
        not Investor(availableFunds < $lowestFunds)

        Investor($highestFunds : availableFunds, $name2: name)
        not Investor(availableFunds > $highestFunds)
    then
        System.out.println( $name1 + " is the investor with the least available founds, " + $lowestFunds );
        System.out.println( $name2 + " is the investor with the most available founds, " + $highestFunds);
    end

//--- Rule 8 ------------------------------------------------------------------------------------------------------------

rule "investors with favorite business domain 'AUTOMOTIVE'" salience 19
    when
        inv: Investor(checkDoamin(inv))
    then
        System.out.println(inv.name + " has as a favorite domain of business 'AUTOMOTIVE' ");
    end

function Boolean checkDoamin(Investor inv){
    Boolean found=false;
    for(BusinessDomain dom:inv.getInvestmentDomainPreferences()){
        if(dom.name()=="AUTOMOTIVE")
            found=true;
    }
    return found;
}

//--- Rule 9 ------------------------------------------------------------------------------------------------------------

rule "get history records for each stock profile that have minPrice >=10, maxPrice <=25" salience 20
    when
        stockProfile: StockProfile(checkMinMaxPrice(stockProfile))
    then
    end

function Boolean checkMinMaxPrice(StockProfile stockProfile){
    BusinessDomain domain = BusinessDomain.TECH;
    Boolean found=false;
    List<StockHistoryRecord> list = new ArrayList<StockHistoryRecord>();
    for(StockHistoryRecord st:stockProfile.getStockHistoryRecordSet()){
        if(st.getMinPrice() >= 10 && st.getMaxPrice() <=25){
                list.add(st);
                found = true;
                }
    }
    System.out.println("Result records for " + stockProfile.getName() + ": " + list.size());
    for(StockHistoryRecord st: list){
        System.out.println(stockProfile.getName() + " " +  domain + " " + st.getMinPrice() + " " + st.getMaxPrice());
    }
    return found;
}

//--- Rule 10 ------------------------------------------------------------------------------------------------------------

rule "total value of transactions" salience 21
    when
        total: Double()
            from accumulate(StockOwned( $price : pricePaid, $quantity: quantity),
                            init(Double tottal = 0;),
                            action(tottal += $price * $quantity;),
                            reverse(tottal -= $price * $quantity;),
                            result(new Double(tottal)))
    then
        System.out.println("Total value of transactions: " + total);
    end

//--- Rule 11 ------------------------------------------------------------------------------------------------------------

rule "cancel all pending transactions from october 2019" salience 22
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && (transactionType == TransactionType.SELL || transactionType == TransactionType.BUY)
            && transactionState == TransactionState.PENDING
            && checkYearAndMonth(at))
        i:Investor(autoTransactionSet.contains(at))
    then
        at.setTransactionState(TransactionState.CANCEL);
        System.out.println("Transaction " + at.getId() + " for " + at.getTransactionType() + " stocks for " + i.name + " has been cancelled");
        update(i);
        update(at);
    end

function boolean checkYearAndMonth(AutoTransaction at){
    int year = at.getWaitUntil().get(Calendar.YEAR);
    int month = at.getWaitUntil().get(Calendar.MONTH);  //zero based
    if(year == 2019 && month == 9)
    {
        return true;
    }
    return false;
}

//--- Rule 12 ------------------------------------------------------------------------------------------------------------

rule "delete all sell expired transactions with year < 2019" salience 23
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && (transactionType == TransactionType.SELL)
            && transactionState == TransactionState.EXPIRED
            && checkYear(at))
    then
        delete(at);
        System.out.println("Transaction " + at.getId() + " has been deleted");
    end

function boolean checkYear(AutoTransaction at){
    int year = at.getWaitUntil().get(Calendar.YEAR);
    if(year < 2019)
    {
        return true;
    }
    return false;
}

//--- Rule 13 ------------------------------------------------------------------------------------------------------------

rule "set type of investor Golden that have over 130000 total stock value and available funds over 100000" salience 25
    when
        inv: Investor(investorType != InvestorType.BLOCKED && availableFunds > 100000)
        total: Double(total >130000)
             from accumulate(StockOwned( $price : pricePaid, $quantity: quantity, investorID == inv.getInvestorID()),
                                    sum($price * $quantity))
    then
        inv.setInvestorType(InvestorType.GOLDEN);
        System.out.println("Investor " + inv.getName() + " has become " + inv.getInvestorType());
    end

//--- Rule 14 ------------------------------------------------------------------------------------------------------------

rule "offer a bonus of 50000 funds at midnight to the investor that has the highest value of available funds from that day" salience -1
    when
        Investor($highestFunds : availableFunds, $name2: name)
                not Investor(availableFunds > $highestFunds)
        inv: Investor(availableFunds == $highestFunds, getTime())
    then
        inv.setAvailableFunds(inv.getAvailableFunds() + 50000);
        System.out.println("Investor " + inv.getName() + " won  50000 funds");
    end

function Boolean getTime()
{
        int hour = Calendar.getInstance().get(Calendar.HOUR);
        int minute = Calendar.getInstance().get(Calendar.MINUTE);
        int second = Calendar.getInstance().get(Calendar.SECOND);

        if(hour == 0 && minute == 0 && second == 0){
            return true;
        }
        return false;
}

//--- Rule 15 ------------------------------------------------------------------------------------------------------------

rule "block all investors with age under 18" salience 22
    when
        inv: Investor(!getAge(inv))
        total: Double()
                     from accumulate(StockOwned( $price : pricePaid, $quantity: quantity, investorID == inv.getInvestorID()),
                                            sum($price * $quantity))
    then
        inv.setInvestorType(InvestorType.BLOCKED);
        System.out.println("Investor " + inv.getName() + " is " + inv.getInvestorType());
    end

function Boolean getAge(Investor inv)
{
        Period diff = Period.between(LocalDate.now(), inv.getBirthDate());
        if(Math.abs(diff.getYears()) >=18){
            return true;
        }
        return false;
}

//--- Rule 16 ------------------------------------------------------------------------------------------------------------

rule "set type of investor SILVER that have over 100000 and less than 130000 total stock value and available funds over 80000" salience 25
    when
        inv: Investor(investorType != InvestorType.BLOCKED && availableFunds > 80000)
        total: Double(total >= 100000 && total <= 130000)
             from accumulate(StockOwned( $price : pricePaid, $quantity: quantity, investorID == inv.getInvestorID()),
                                    sum($price * $quantity))
    then
        inv.setInvestorType(InvestorType.SILVER);
        System.out.println("Investor " + inv.getName() + " has become " + inv.getInvestorType());
    end

//--- Rule 17 ------------------------------------------------------------------------------------------------------------

rule "average of min and max price of the stock history record" salience 21
    when
        avg: Double()
            from accumulate(StockHistoryRecord( $minPrice : minPrice, $maxPrice: maxPrice),
                            init(Double average = 0;),
                            action(average += ($minPrice * $maxPrice)/2;),
                            reverse(average -= ($minPrice * $maxPrice)/2;),
                            result(new Double(average)))
    then
        System.out.println("Average of min and max prices: " + avg);
    end

//--- Rule 18 ------------------------------------------------------------------------------------------------------------

rule "set type of investor Golden that have over 70000 and less than 100000 total stock value and available funds over 50000" salience 25
    when
        inv: Investor(investorType != InvestorType.BLOCKED && availableFunds > 50000)
        total: Double(total >= 70000 && total < 100000)
             from accumulate(StockOwned( $price : pricePaid, $quantity: quantity, investorID == inv.getInvestorID()),
                                    sum($price * $quantity))
    then
        inv.setInvestorType(InvestorType.BRONZE);
        System.out.println("Investor " + inv.getName() + " has become " + inv.getInvestorType());
    end

//--- Rule 19 ------------------------------------------------------------------------------------------------------------

//--- Rule 20 ------------------------------------------------------------------------------------------------------------

//--- Rule 21 ------------------------------------------------------------------------------------------------------------

//--- Rule 22 ------------------------------------------------------------------------------------------------------------

//--- Rule 23 ------------------------------------------------------------------------------------------------------------

//--- Rule 24 ------------------------------------------------------------------------------------------------------------

//--- Rule 25 ------------------------------------------------------------------------------------------------------------

