package com.aib;
import com.aib.*
dialect "mvel"
import java.util.*
import com.aib.enums.*
import java.util.Date

//--- Rule 1 ------------------------------------------------------------------------------------------------------------

rule "checkTransactionExpired" salience 15
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
    // check if the transaction hasn't expired
        && at.getWaitUntil().compareTo(Calendar.getInstance()) < 0
        && transactionState != TransactionState.EXPIRED
        )
    then
        at.setTransactionState(TransactionState.EXPIRED);
        System.out.println("Transaction with id " + at.getId() + " has expired");
        update(at);
end

//--- Rule 2 ------------------------------------------------------------------------------------------------------------

rule "checkTransactionStillValid" salience 13
    when
    // check if the transaction hasn't expired
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
        && waitUntil.compareTo(Calendar.getInstance()) >= 0)
    then
        at.setTransactionState(TransactionState.ON_TERM);
        System.out.println("Transaction with id " + at.getId() + " is still on term");
        update(at);
end

//--- Rule 3 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactBuyThresholdTrue" salience 11
    when
        sp:StockProfile()
        at:AutoTransaction(
            stockProfile == sp
            && transactionType == TransactionType.BUY
            && transactionState == TransactionState.ON_TERM
            && thresholdPrice >= sp.currentPrice
            )
//        check that the transaction actually  belongs to an investor
        i:Investor(autoTransactionSet.contains(at))
    then
        at.setTransactionState(TransactionState.IS_IN_THRESHOLD);
        System.out.println("Pending transaction " + at.getId() + " for buying stocks for " + i.name + " has the stock price in the required limits");
        update(at);
end

//--- Rule 4 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactSellThresholdTrue" salience 9
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.SELL
            && transactionState == TransactionState.ON_TERM
            && thresholdPrice <= sp.currentPrice)
//        check that the transaction actually  belongs to an investor
        i:Investor(autoTransactionSet.contains(at))
    then
        at.setTransactionState(TransactionState.IS_IN_THRESHOLD);
        System.out.println("Pending transaction " + at.getId() + " for selling stocks for " + i.name + " has the stock price in the required limits");
        update(at);
end

//--- Rule 5 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactBuy" salience 5
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.BUY
            && transactionState == TransactionState.IS_IN_THRESHOLD)
//        check that the transaction actually  belongs to an investor
//        + check if the investor has enough available funds
        i:Investor(autoTransactionSet.contains(at) && availableFunds >= (at.noOfShares * sp.currentPrice))
    then
        // we execute transaction
        Investor.executeBuyTransaction(i, at);
        at.setTransactionState(TransactionState.PROCESSED);
            Double costOfShares = at.getNoOfShares() * at.getStockProfile().getCurrentPrice();
            i.setAvailableFunds(i.getAvailableFunds() - costOfShares);
        System.out.println("Transaction for buying stocks for " + i.name + " has been successfully executed");
        update(i);
        update(at);
end

//--- Rule 6 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactSell" salience 7
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.SELL
            && transactionState == TransactionState.IS_IN_THRESHOLD)
//        check that the transaction actually  belongs to an investor
        i:Investor(autoTransactionSet.contains(at))
    then
        // we execute transaction
        Investor.executeSellTransaction(i, at);
        at.setTransactionState(TransactionState.PROCESSED);
            Double valueOfShares = at.getNoOfShares() * at.getStockProfile().getCurrentPrice();
            i.setAvailableFunds(i.getAvailableFunds() + valueOfShares);
        System.out.println("Transaction for selling stocks for " + i.name + " has been successfully executed");
        update(i);
        update(at);
end

// TBC: rule for no funds, rule for no shares, reset state to pending after processing transactions

rule "checkTransactionsWithNotEnoughFunds" salience 8
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.BUY
            && transactionState == TransactionState.IS_IN_THRESHOLD)
        i:Investor(autoTransactionSet.contains(at)
        && (availableFunds < (at.noOfShares * sp.currentPrice)))
    then
        at.setTransactionState(TransactionState.NOT_ENOUGH_FUNDS);
        i.addNotification("Not enough funds for executing transaction " + at.getId() + " Please");
        System.out.println("Transaction " + at.getId() + " for buying stocks requires " + (at.noOfShares * sp.currentPrice));
        update(i);
        update(at);
    end

rule "checkTransactionsWithNotEnoughShares" salience 8
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.SELL
            && transactionState == TransactionState.IS_IN_THRESHOLD)
        totalShares: Double()
                    from accumulate(StockOwned(stockProfile.name == at.stockProfile.name, $quantity : quantity),
                                    init(Double shareSum = 0;),
                                    action(shareSum += $quantity;),
                                    reverse(shareSum -= $quantity;),
                                    result(new Double(shareSum)))
        i:Investor(autoTransactionSet.contains(at)
        && at.noOfShares > totalShares)
    then
        i.addNotification("Not enough shares for executing transaction " + at.getId() + " Please");
        at.setTransactionState(TransactionState.NOT_ENOUGH_SHARES);
        System.out.println("Not enough shares! Transaction " + at.getId() + " for selling stocks requires " + at.noOfShares + " shares and you only have " + totalShares);
        update(at);
        update(i);
    end

rule "applyComissionForPlacingTransactionBelow50k" salience 101
    when
        at:AutoTransaction((noOfShares * thresholdPrice) < 50000)
        i:Investor(autoTransactionSet.contains(at))
    then
        i.setAvailableFunds(i.getAvailableFunds - (at.noOfShares * at.thresholdPrice * 0.001));
        System.out.println("Comission for transaction values lower than 50k applied totalling " + (at.noOfShares * at.thresholdPrice * 0.001));
    end

rule "applyComissionForPlacingTransactionBetween50kAnd100k" salience 101
    when
        at:AutoTransaction($transactionValue : (noOfShares * thresholdPrice), $transactionValue >= 50000
        && $transactionValue < 100000)
        i:Investor(autoTransactionSet.contains(at))
    then
        i.setAvailableFunds(i.getAvailableFunds - (at.noOfShares * at.thresholdPrice * 0.0005));
        System.out.println("Comission for values between 50k and 100k applied totalling " + (at.noOfShares * at.thresholdPrice * 0.0005));
    end

rule "applyComissionForPlacingTransactionHigherThan100k" salience 101
    when
        at:AutoTransaction($transactionValue : (noOfShares * thresholdPrice), $transactionValue >= 100000)
        i:Investor(autoTransactionSet.contains(at))
    then
        i.setAvailableFunds(i.getAvailableFunds - (at.noOfShares * at.thresholdPrice * 0.0002));
        System.out.println("Comission for trnasaction value higher than 100k applied totalling " + (at.noOfShares * at.thresholdPrice * 0.0002));
    end

//--- Rule 7 ------------------------------------------------------------------------------------------------------------

rule "highest/lowest available founds" salience 18
    when
        Investor($lowestFunds : availableFunds, $name1 : name)
        not Investor(availableFunds < $lowestFunds)

        Investor($highestFunds : availableFunds, $name2: name)
        not Investor(availableFunds > $highestFunds)
    then
        System.out.println( $name1 + " is the investor with the least available founds, " + $lowestFunds );
        System.out.println( $name2 + " is the investor with the most available founds, " + $highestFunds);
    end

//--- Rule 8 ------------------------------------------------------------------------------------------------------------

rule "investors with favorite business domain 'AUTOMOTIVE'" salience 19
    when
        inv: Investor(checkDoamin(inv))
    then
        System.out.println(inv.name + " has as a favorite domain of business 'AUTOMOTIVE' ");
    end

function Boolean checkDoamin(Investor inv){
    Boolean found=false;
    for(BusinessDomain dom:inv.getInvestmentDomainPreferences()){
        if(dom.name()=="AUTOMOTIVE")
            found=true;
    }
    return found;
}

//--- Rule 9 ------------------------------------------------------------------------------------------------------------

rule "get history records for each stock profile that have minPrice >=10, maxPrice <=25" salience 20
    when
        stockProfile: StockProfile(checkMinMaxPrice(stockProfile))
    then
    end

function Boolean checkMinMaxPrice(StockProfile stockProfile){
    BusinessDomain domain = BusinessDomain.TECH;
    Boolean found=false;
    List<StockHistoryRecord> list = new ArrayList<StockHistoryRecord>();
    for(StockHistoryRecord st:stockProfile.getStockHistoryRecordSet()){
        if(st.getMinPrice() >= 10 && st.getMaxPrice() <=25){
                list.add(st);
                found = true;
                }
    }
    System.out.println("Result records for " + stockProfile.getName() + ": " + list.size());
    for(StockHistoryRecord st: list){
        System.out.println(stockProfile.getName() + " " +  domain + " " + st.getMinPrice() + " " + st.getMaxPrice());
    }
    return found;
}

//--- Rule 10 ------------------------------------------------------------------------------------------------------------

rule "total value of transactions" salience 21
    when
        total: Double()
            from accumulate(StockOwned( $price : pricePaid, $quantity: quantity),
                            init(Double tottal = 0;),
                            action(tottal += $price * $quantity;),
                            reverse(tottal -= $price * $quantity;),
                            result(new Double(tottal)))
    then
        System.out.println("Total value of transactions: " + total);
    end

//--- Rule 11 ------------------------------------------------------------------------------------------------------------

rule "cancel all pending transactions from october 2019" salience 22
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && (transactionType == TransactionType.SELL || transactionType == TransactionType.BUY)
            && transactionState == TransactionState.PENDING
            && checkYearAndMonth(at))
        i:Investor(autoTransactionSet.contains(at))
    then
        at.setTransactionState(TransactionState.CANCEL);
        System.out.println("Transaction " + at.getId() + " for " + at.getTransactionType() + " stocks for " + i.name + " has been cancelled");
        update(i);
        update(at);
    end

function boolean checkYearAndMonth(AutoTransaction at){
    int year = at.getWaitUntil().get(Calendar.YEAR);
    int month = at.getWaitUntil().get(Calendar.MONTH);  //zero based
    if(year == 2019 && month == 9)
    {
        return true;
    }
    return false;
}

//--- Rule 12 ------------------------------------------------------------------------------------------------------------

rule "delete all sell expired transactions with year < 2019" salience 23
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && (transactionType == TransactionType.SELL)
            && transactionState == TransactionState.EXPIRED
            && checkYearAndMonth1(at))
    then
        delete(at);
        System.out.println("Transaction " + at.getId() + " has been deleted");
    end

function boolean checkYearAndMonth1(AutoTransaction at){
    int year = at.getWaitUntil().get(Calendar.YEAR);
    if(year < 2019)
    {
        return true;
    }
    return false;
}

//--- Rule 13 ------------------------------------------------------------------------------------------------------------

//--- Rule 14 ------------------------------------------------------------------------------------------------------------

//--- Rule 15 ------------------------------------------------------------------------------------------------------------

//--- Rule 16 ------------------------------------------------------------------------------------------------------------

//--- Rule 17 ------------------------------------------------------------------------------------------------------------

//--- Rule 18 ------------------------------------------------------------------------------------------------------------

//--- Rule 19 ------------------------------------------------------------------------------------------------------------

//--- Rule 20 ------------------------------------------------------------------------------------------------------------

//--- Rule 21 ------------------------------------------------------------------------------------------------------------

//--- Rule 22 ------------------------------------------------------------------------------------------------------------

//--- Rule 23 ------------------------------------------------------------------------------------------------------------

//--- Rule 24 ------------------------------------------------------------------------------------------------------------

//--- Rule 25 ------------------------------------------------------------------------------------------------------------






//rule "discount for new customers" salience -2
//when
//	c:Client(type=="New")
//	o:Order(client==c)
//	a:Article(order==o)
//	p:Product(a.product==p)
//then
//	o.setDiscount(0.1);
//	System.out.println("the discount for a new Customer is "+o.getDiscount());
//	System.out.println(o.getOrderValue());
//end
//
//rule "discount for new customers that buy luxury products" salience 4
//when
//	c:Client(type=="New")
//	o:Order(client==c)
//	a:Article(order==o)
//	p:Product(type=="Medicine", a.product==p)
//then
//	o.setDiscount(0.05);
//	System.out.println("the discount for luxury "+o.getDiscount());
//	System.out.println(o.getOrderValue());
//end
//
//
//rule "discount for medicines sold to new customers"
//when
//	c:Client(type=="New")
//	o:Order(client==c)
//	a:Article(order==o)
//	p:Product(type=="Medicine", a.product==p)
//then
//	o.setDiscount(0.0);
//	System.out.println("The product that has the name "+p.getName()+" has the discount equal to "+p.getDiscount());
//end
//
//rule "discount for new customers which by grocery products"
//when
//	c:Client(type=="New")
//	o:Order(client==c)
//	a:ArticleOfOrder(order==o)
//	p:Product(type=="Grocery", a.product==p)
//then
//	p.setDiscount(0.1);
//	System.out.println("The product that has the name "+p.getName()+" has the discount equal to "+p.getDiscount());
//end
