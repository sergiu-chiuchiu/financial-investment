package com.aib;
import com.aib.*
dialect "mvel"
import java.util.*
import com.aib.enums.*

//--- Rule 1 ------------------------------------------------------------------------------------------------------------

rule "checkTransactionExpired" salience 15
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
    // check if the transaction hasn't expired
        && at.getWaitUntil().compareTo(Calendar.getInstance()) < 0
        && transactionState != TransactionState.EXPIRED
        )
    then
        at.setTransactionState(TransactionState.EXPIRED);
        System.out.println("Transaction with id " + at.getId() + " has expired");
        update(at);
end

//--- Rule 2 ------------------------------------------------------------------------------------------------------------

rule "checkTransactionStillValid" salience 13
    when
    // check if the transaction hasn't expired
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
        && waitUntil.compareTo(Calendar.getInstance()) >= 0)
    then
        at.setTransactionState(TransactionState.ON_TERM);
        System.out.println("Transaction with id " + at.getId() + " is still on term");
        update(at);
end

//--- Rule 3 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactBuyThresholdTrue" salience 11
    when
        sp:StockProfile()
        at:AutoTransaction(
            stockProfile == sp
            && transactionType == TransactionType.BUY
            && transactionState == TransactionState.ON_TERM
            && thresholdPrice >= sp.currentPrice
            )
//        check that the transaction actually  belongs to an investor
        i:Investor(autoTransactionSet.contains(at))
    then
        at.setTransactionState(TransactionState.IS_IN_THRESHOLD);
        System.out.println("Pending transaction " + at.getId() + " for buying stocks for " + i.name + " has the stock price in the required limits");
        update(at);
end

//--- Rule 4 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactSellThresholdTrue" salience 9
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.SELL
            && transactionState == TransactionState.ON_TERM
            && thresholdPrice <= sp.currentPrice)
//        check that the transaction actually  belongs to an investor
        i:Investor(autoTransactionSet.contains(at))
    then
        at.setTransactionState(TransactionState.IS_IN_THRESHOLD);
        System.out.println("Pending transaction " + at.getId() + " for selling stocks for " + i.name + " has the stock price in the required limits");
        update(at);
end

//--- Rule 5 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactBuy" salience 5
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.BUY
            && transactionState == TransactionState.IS_IN_THRESHOLD)
//        check that the transaction actually  belongs to an investor
//        + check if the investor has enough available funds
        i:Investor(autoTransactionSet.contains(at) && availableFunds >= (at.noOfShares * sp.currentPrice))
    then
        // we execute transaction
        Investor.executeBuyTransaction(i, at);
        at.setTransactionState(TransactionState.PROCESSED);
            Double costOfShares = at.getNoOfShares() * at.getStockProfile().getCurrentPrice();
            i.setAvailableFunds(i.getAvailableFunds() - costOfShares);
        System.out.println("Transaction for buying stocks for " + i.name + " has been successfully executed");
        update(i);
        update(at);
end

//--- Rule 6 ------------------------------------------------------------------------------------------------------------

rule "checkAutoTransactSell" salience 7
    when
        sp:StockProfile()
        at:AutoTransaction(stockProfile == sp
            && transactionType == TransactionType.SELL
            && transactionState == TransactionState.IS_IN_THRESHOLD)
//        check that the transaction actually  belongs to an investor
        i:Investor(autoTransactionSet.contains(at))
    then
        // we execute transaction
        Investor.executeSellTransaction(i, at);
        at.setTransactionState(TransactionState.PROCESSED);
            Double valueOfShares = at.getNoOfShares() * at.getStockProfile().getCurrentPrice();
            i.setAvailableFunds(i.getAvailableFunds() + valueOfShares);
        System.out.println("Transaction for selling stocks for " + i.name + " has been successfully executed");
        update(i);
        update(at);
end

//--- Rule 7 ------------------------------------------------------------------------------------------------------------

rule "highest/lowest available founds"
    when
        Investor($lowestFunds : availableFunds, $name1 : name)
        not Investor(availableFunds < $lowestFunds)

        Investor($highestFunds : availableFunds, $name2: name)
        not Investor(availableFunds > $highestFunds)
    then
        System.out.println( $name1 + " is the investor with the least available founds, " + $lowestFunds );
        System.out.println( $name2 + " is the investor with the most available founds, " + $highestFunds);
    end

//--- Rule 8 ------------------------------------------------------------------------------------------------------------

rule "investors with favorite business domain 'AUTOMOTIVE'"
    when
        inv: Investor(isValid(inv))
    then
        System.out.println(inv.name + " has as a favorite domain of business 'AUTOMOTIVE' ");
    end

function Boolean isValid(Investor inv){
    Boolean found=false;
    for(BusinessDomain dom:inv.getInvestmentDomainPreferences()){
        if(dom.name()=="AUTOMOTIVE")
        found=true;
    }
    return found;
}

//--- Rule 9 ------------------------------------------------------------------------------------------------------------

rule "get history records for each investor that have minPrice >=10, maxPrice <=25"
    when
        stockProfile: StockProfile(isValid3(stockProfile))
    then
    end

function Boolean isValid3(StockProfile stockProfile){
    BusinessDomain domain = BusinessDomain.TECH;
    Boolean found=false;
    List<StockHistoryRecord> list = new ArrayList<StockHistoryRecord>();
    for(StockHistoryRecord st:stockProfile.getStockHistoryRecordSet()){
        if(st.getMinPrice() >= 10 && st.getMaxPrice() <=25){
                list.add(st);
                found = true;
                }
    }
    System.out.println("Result records for " + stockProfile.getName() + ": " + list.size());
    for(StockHistoryRecord st: list){
        System.out.println(stockProfile.getName() + " " +  domain + " " + st.getMinPrice() + " " + st.getMaxPrice());
    }
    return found;
}

//--- Rule 10------------------------------------------------------------------------------------------------------------

//--- Rule 11------------------------------------------------------------------------------------------------------------

//--- Rule 12------------------------------------------------------------------------------------------------------------

//--- Rule 13------------------------------------------------------------------------------------------------------------

//--- Rule 14------------------------------------------------------------------------------------------------------------

//--- Rule 15------------------------------------------------------------------------------------------------------------

//--- Rule 16------------------------------------------------------------------------------------------------------------

//--- Rule 17------------------------------------------------------------------------------------------------------------

//--- Rule 18 ------------------------------------------------------------------------------------------------------------

//--- Rule 19 ------------------------------------------------------------------------------------------------------------

//--- Rule 20 ------------------------------------------------------------------------------------------------------------

//--- Rule 21 ------------------------------------------------------------------------------------------------------------

//--- Rule 22 ------------------------------------------------------------------------------------------------------------

//--- Rule 23 ------------------------------------------------------------------------------------------------------------

//--- Rule 24 ------------------------------------------------------------------------------------------------------------

//--- Rule 25 ------------------------------------------------------------------------------------------------------------





// TBC: rule for no funds, rule for no shares, reset state to pending after processing transactions

//rule "discount for new customers" salience -2
//when
//	c:Client(type=="New")
//	o:Order(client==c)
//	a:Article(order==o)
//	p:Product(a.product==p)
//then
//	o.setDiscount(0.1);
//	System.out.println("the discount for a new Customer is "+o.getDiscount());
//	System.out.println(o.getOrderValue());
//end
//
//rule "discount for new customers that buy luxury products" salience 4
//when
//	c:Client(type=="New")
//	o:Order(client==c)
//	a:Article(order==o)
//	p:Product(type=="Medicine", a.product==p)
//then
//	o.setDiscount(0.05);
//	System.out.println("the discount for luxury "+o.getDiscount());
//	System.out.println(o.getOrderValue());
//end
//
//
//rule "discount for medicines sold to new customers"
//when
//	c:Client(type=="New")
//	o:Order(client==c)
//	a:Article(order==o)
//	p:Product(type=="Medicine", a.product==p)
//then
//	o.setDiscount(0.0);
//	System.out.println("The product that has the name "+p.getName()+" has the discount equal to "+p.getDiscount());
//end
//
//rule "discount for new customers which by grocery products"
//when
//	c:Client(type=="New")
//	o:Order(client==c)
//	a:ArticleOfOrder(order==o)
//	p:Product(type=="Grocery", a.product==p)
//then
//	p.setDiscount(0.1);
//	System.out.println("The product that has the name "+p.getName()+" has the discount equal to "+p.getDiscount());
//end
